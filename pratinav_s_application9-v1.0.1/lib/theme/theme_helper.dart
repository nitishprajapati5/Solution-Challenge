import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.gray90003,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(28.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.whiteA70001,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(15.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: appTheme.gray80001,
      ),
      dividerTheme: DividerThemeData(
        thickness: 24,
        space: 24,
        color: appTheme.gray800,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        displayLarge: TextStyle(
          color: appTheme.gray600,
          fontSize: 60.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w800,
        ),
        displaySmall: TextStyle(
          color: appTheme.gray400,
          fontSize: 36.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w600,
        ),
        headlineLarge: TextStyle(
          color: appTheme.whiteA70001,
          fontSize: 30.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w800,
        ),
        headlineSmall: TextStyle(
          color: appTheme.whiteA70001,
          fontSize: 24.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w800,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray50001,
          fontSize: 12.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w800,
        ),
        labelMedium: TextStyle(
          color: appTheme.gray80001,
          fontSize: 10.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w800,
        ),
        titleLarge: TextStyle(
          color: appTheme.whiteA70001,
          fontSize: 20.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w800,
        ),
        titleMedium: TextStyle(
          color: appTheme.whiteA70001,
          fontSize: 18.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w800,
        ),
        titleSmall: TextStyle(
          color: appTheme.whiteA70001,
          fontSize: 14.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w800,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF926247),
    primaryContainer: Color(0XFF141F38),
    secondaryContainer: Color(0XFF407CE2),

    // Error colors
    errorContainer: Color(0XFF6F4A33),

    // On colors(text colors)
    onPrimary: Color(0XFF111113),
    onPrimaryContainer: Color(0XFFC6B9B9),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber300 => Color(0XFFFFCE5B);

  // Black
  Color get black900 => Color(0XFF000000);

  // BlueGray
  Color get blueGray100 => Color(0XFFD9D9D9);

  // DeepOrange
  Color get deepOrange100 => Color(0XFFFFC89E);
  Color get deepOrange400 => Color(0XFFFE804B);
  Color get deepOrange50 => Color(0XFFFFE5E5);

  // DeepOrangef
  Color get deepOrange4003f => Color(0X3FFE814B);

  // DeepPurple
  Color get deepPurple300 => Color(0XFF8978E3);
  Color get deepPurple600 => Color(0XFF5349A5);
  Color get deepPurpleA100 => Color(0XFFA694F5);

  // Gray
  Color get gray100 => Color(0XFFF1F5FD);
  Color get gray10001 => Color(0XFFF7F4F2);
  Color get gray10002 => Color(0XFFF7F3F2);
  Color get gray300 => Color(0XFFE7DDD8);
  Color get gray30001 => Color(0XFFE5EAD6);
  Color get gray30002 => Color(0XFFE8DCD8);
  Color get gray400 => Color(0XFFC9C7C5);
  Color get gray500 => Color(0XFFACA8A5);
  Color get gray50001 => Color(0XFFBFA090);
  Color get gray600 => Color(0XFF736A66);
  Color get gray700 => Color(0XFF59554E);
  Color get gray800 => Color(0XFF3F3B35);
  Color get gray80001 => Color(0XFF4B3425);
  Color get gray80002 => Color(0XFF3D4926);
  Color get gray80003 => Color(0XFF4E3321);
  Color get gray80026 => Color(0X264B3325);
  Color get gray900 => Color(0XFF221F1F);
  Color get gray90001 => Color(0XFF432400);
  Color get gray90002 => Color(0XFF251404);
  Color get gray90003 => Color(0XFF241404);
  Color get gray90004 => Color(0XFF372314);
  Color get gray900A3 => Color(0XA31F160F);

  // Green
  Color get green400 => Color(0XFF52C365);
  Color get green500 => Color(0XFF2DBC4D);

  // Indigo
  Color get indigo800 => Color(0XFF3C357C);

  // LightGreen
  Color get lightGreen300 => Color(0XFFB4C38C);
  Color get lightGreen400 => Color(0XFF9BB067);
  Color get lightGreen40001 => Color(0XFF9BB068);
  Color get lightGreen50 => Color(0XFFF2F4EA);
  Color get lightGreen700 => Color(0XFF7D934C);
  Color get lightGreen800 => Color(0XFF5A6B37);

  // Lime
  Color get lime900 => Color(0XFF705600);
  Color get lime90001 => Color(0XFF663600);

  // Orange
  Color get orange50 => Color(0XFFFFEED6);
  Color get orange900 => Color(0XFFC96100);
  Color get orangeA100 => Color(0XFFFFD188);

  // Red
  Color get red200 => Color(0XFFFF9898);
  Color get red50 => Color(0XFFFCEDED);
  Color get red5001 => Color(0XFFFEEFEA);

  // White
  Color get whiteA700 => Color(0XFFFFFEFE);
  Color get whiteA70001 => Color(0XFFFFFFFF);

  // Yellow
  Color get yellow900 => Color(0XFFF47F13);
  Color get yellow90001 => Color(0XFFEC7D1C);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
